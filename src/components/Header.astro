---
import SocialLinks from "./SocialLinks.astro";

import IconRenderer, { Icon } from "../utilities/IconRenderer.astro";

const navLinks = [
    "Inicio",
    "Nosotros",
    "Ubicación",
    "Atracciones",
    "Eventos",
    "Contacto",
];

const logoIconClasses = "h-8 w-8 text-brand-green";
---

<header class="bg-white/80 backdrop-blur-md sticky top-0 z-50 shadow-sm">
    <div class="container mx-auto px-6 py-4 flex justify-between items-center">
        <div class="flex items-center space-x-2">
            <IconRenderer icon={Icon.Leaf} class={logoIconClasses} />
            <span class="text-xl font-bold text-brand-text"
                >Paraíso de la Caña</span
            >
        </div>
        <nav class="hidden lg:flex items-center space-x-8">
            {
                navLinks.map((link) => (
                    <a
                        href={`#${link.toLowerCase()}`}
                        class="text-gray-600 hover:text-brand-green transition-colors duration-300"
                    >
                        {link}
                    </a>
                ))
            }
        </nav>
        <div class="hidden lg:flex items-center space-x-4">
            <SocialLinks />
        </div>
        <header-menu class="relative">
            <div class="lg:hidden">
                <button
                    aria-label="Open menu"
                    aria-expanded="false"
                    data-menu-button
                >
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                        data-icon-open
                        ><path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h16m-7 6h7"></path></svg
                    >
                    <svg
                        class="w-6 h-6 hidden"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                        data-icon-close
                        ><path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"></path></svg
                    >
                </button>
            </div>
            <div
                class="absolute top-[68px] right-0 w-full bg-white/95 backdrop-blur-sm pb-4 shadow-xl hidden"
                data-mobile-menu
            >
                <nav class="flex flex-col items-center space-y-4">
                    {
                        navLinks.map((link) => (
                            <a
                                href={`#${link.toLowerCase()}`}
                                class="text-gray-600 hover:text-brand-green transition-colors duration-300 py-1 w-full text-center"
                                data-menu-link
                            >
                                {link}
                            </a>
                        ))
                    }
                    <div
                        class="flex items-center space-x-4 pt-4 border-t w-full justify-center"
                    >
                        <SocialLinks />
                    </div>
                </nav>
            </div>
        </header-menu>
    </div>

    <script>
        class HeaderMenu extends HTMLElement {
            private isMenuOpen: boolean;
            private menuButton: HTMLButtonElement | null;
            private mobileMenu: HTMLDivElement | null;
            private iconOpen: SVGElement | null;
            private iconClose: SVGElement | null;

            constructor() {
                super();
                this.isMenuOpen = false;
                this.menuButton = null;
                this.mobileMenu = null;
                this.iconOpen = null;
                this.iconClose = null;
            }

            connectedCallback() {
                this.menuButton = this.querySelector("[data-menu-button]");
                this.mobileMenu = this.querySelector("[data-mobile-menu]");
                this.iconOpen = this.querySelector("[data-icon-open]");
                this.iconClose = this.querySelector("[data-icon-close]");

                if (this.menuButton) {
                    this.menuButton.addEventListener(
                        "click",
                        this.toggleMenu.bind(this),
                    );
                }

                this.querySelectorAll("[data-menu-link]").forEach((link) => {
                    link.addEventListener("click", this.closeMenu.bind(this));
                });

                this.updateVisibility();
            }

            toggleMenu() {
                this.isMenuOpen = !this.isMenuOpen;
                this.updateVisibility();
            }

            closeMenu() {
                this.isMenuOpen = false;
                this.updateVisibility();
            }

            updateVisibility() {
                if (this.mobileMenu) {
                    // Controla la visibilidad del menú móvil
                    this.mobileMenu.classList.toggle(
                        "hidden",
                        !this.isMenuOpen,
                    );
                    this.mobileMenu.classList.toggle("flex", this.isMenuOpen);

                    // Controla el ícono de la hamburguesa y el de cerrar
                    this.iconOpen?.classList.toggle("hidden", this.isMenuOpen);
                    this.iconClose?.classList.toggle(
                        "hidden",
                        !this.isMenuOpen,
                    );

                    // Controla ARIA
                    this.menuButton?.setAttribute(
                        "aria-expanded",
                        this.isMenuOpen.toString(),
                    );
                }
            }

            disconnectedCallback() {
                if (this.menuButton)
                    this.menuButton.removeEventListener(
                        "click",
                        this.toggleMenu,
                    );

                this.querySelectorAll("[data-menu-link]").forEach((link) => {
                    link.removeEventListener("click", this.closeMenu);
                });
            }
        }

        customElements.define("header-menu", HeaderMenu);
    </script>
</header>
